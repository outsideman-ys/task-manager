openapi: 3.0.3
info:
  title: Task Manager (Test task) 1.0
  description: |-
    Тестовое задание. Автор: Егор Смирнов.
    Ссылка на репозиторий:
    - [Task Manager Repository](https://github.com/outsideman-ys/task-manager)
    
  contact:
    email: y.smirnov01@gmail.com
  version: 1.0.11
servers:
  - url: https://localhost:8080
tags:
  - name: Task CRUD
  - name: Commentary CRUD
  - name: User
  - name: Auth
paths:
  /task/{taskId}:
    get:
      tags:
        - Task CRUD
      summary: Get existing task
      description: Get existing task by Id
      operationId: getTask
      parameters:
        - name: taskId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      security:
        - Bearer: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '422':
          description: Validation exception
    put:
      tags:
        - Task CRUD
      summary: Update existing task
      description: Update existing task by Id
      operationId: updateTask
      parameters:
        - name: taskId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/xml:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      security:
        - Bearer: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '422':
          description: Validation exception
    delete:
      tags:
        - Task CRUD
      summary: Delete existing task
      description: Delete existing task by Id
      operationId: deleteTask
      parameters:
        - name: taskId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      security:
        - Bearer: []
      responses:
        '200':
          description: Echoed response
          content:
            text/plain:
              schema:
                type: string
                example: "2 Cool task DELETED"
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '422':
          description: Validation exception
  /task:
    post:
      tags:
        - Task CRUD
      summary: Add a new task
      description: Add a new task
      operationId: createTask
      requestBody:
        description: Create a new task
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/xml:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      security:
        - Bearer: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      tags:
        - Task CRUD
      summary: Get list of existing tasks
      description: Get list of existing tasks
      operationId: getAllTasks
      security:
        - Bearer: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
  /task/{taskId}/status:
    put:
      tags:
        - Task CRUD
      summary: Update status of task
      description: Update status of existing task
      operationId: updateTaskStatus
      parameters:
        - name: taskId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update status of existing task
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: 'PENDING'
          application/xml:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: 'PENDING'
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: 'PENDING'
        required: true
      security:
        - Bearer: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '422':
          description: Validation exception
  /commentary/{commentaryId}:
    get:
      tags:
        - Commentary CRUD
      summary: Get existing commentary
      description: Get existing commentary by Id
      operationId: getCommentary
      parameters:
        - name: commentaryId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      security:
        - Bearer: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commentary'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Commentary'
        '400':
          description: Invalid ID supplied
        '404':
          description: Commentary not found
        '422':
          description: Validation exception
    put:
      tags:
        - Commentary CRUD
      summary: Update existing commentary
      description: Update existing commentary by Id
      operationId: updateCommentary
      parameters:
        - name: commentaryId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent commentary
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Commentary'
          application/xml:
            schema:
              $ref: '#/components/schemas/Commentary'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Commentary'
        required: true
      security:
        - Bearer: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commentary'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Commentary'
        '400':
          description: Invalid ID supplied
        '404':
          description: Commentary not found
        '422':
          description: Validation exception
    delete:
      tags:
        - Commentary CRUD
      summary: Delete existing commentary
      description: Delete existing commentary by Id
      operationId: deleteCommentary
      parameters:
        - name: commentaryId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      security:
        - Bearer: []
      responses:
        '200':
          description: Echoed response
          content:
            text/plain:
              schema:
                type: string
                example: "2 Cool task DELETED"
        '400':
          description: Invalid ID supplied
        '404':
          description: Commentary not found
        '422':
          description: Validation exception
  /commentary:
    post:
      tags:
        - Commentary CRUD
      summary: Add a new commentary
      description: Add a new commentary
      operationId: createCommentary
      requestBody:
        description: Create a new commentary
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Commentary'
          application/xml:
            schema:
              $ref: '#/components/schemas/Commentary'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Commentary'
        required: true
      security:
        - Bearer: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commentary'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Commentary'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
    get:
      tags:
        - Commentary CRUD
      summary: Get list of existing commentaries
      description: Get list of existing commentaries
      operationId: getAllCommentaries
      security:
        - Bearer: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Commentary'  
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Commentary'  
  /user/{userId}/assign-admin:
    put:
      tags:
        - User
      summary: Give the user the administrator role
      description: Give the user by Id the administrator role 
      operationId: assignAdminRole
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      security:
        - Bearer: []
      responses:
        '200':
          description: Echoed response
          content:
            text/plain:
              schema:
                type: string
                example: "User with ID 2 is now an ADMIN"
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
        '422':
          description: Validation exception
  /auth/sign-in:
    post:
      tags:
        - Auth
      summary: Login
      description: Returns a JWT token
      operationId: signIn
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: email
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'jwt.token.here'
        '422':
          description: Validation exception 
  /auth/sign-up:
    post:
      tags:
        - Auth
      summary: Registration
      description: Returns a JWT token
      operationId: signUp
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: password
          in: query
          required: true
          schema:
            type: string
      security:
        - BasicAuth: []
      responses:
        '200':
          description: Successfully registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 'jwt.token.here'
        '422':
          description: Validation exception
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Commentary:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        content:
          type: string
          example: Very cool task
        author:
          $ref: '#/components/schemas/User'
        task:
          $ref: '#/components/schemas/Task'
      xml:
        name: commentary
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        role:
          type: string
          description: user's role
          enum: 
            - ROLE_USER
            - ROLE_ADMIN
        isEnabled:
          type: boolean
          description: used for removed users
      xml:
        name: user
    Task:
      required:
        - title
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: Create a hello world
        description:
          type: string
          example: Write a C++ program using CUDA
        author:
          $ref: '#/components/schemas/User'
        executor:
          $ref: '#/components/schemas/User'
        priority:
          type: string
          description: task priority
          enum:
            - LOW
            - MEDIUM
            - HIGH
        status:
          type: string
          description: task status
          enum:
            - PENDING
            - IN_PROGRESS
            - DONE
        createdAt: 
          type: string
          description: time of task creation
          format: date-time
        updatedAt: 
          type: string
          description: time of task update
          format: date-time
      xml:
        name: task